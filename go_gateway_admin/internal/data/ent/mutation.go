// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/baker-yuan/go-gateway/go-gateway-admin/internal/data/ent/httprule"
	"github.com/baker-yuan/go-gateway/go-gateway-admin/internal/data/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeHttpRule = "HttpRule"
)

// HttpRuleMutation represents an operation that mutates the HttpRule nodes in the graph.
type HttpRuleMutation struct {
	config
	op                Op
	typ               string
	id                *uint32
	gw_url            *string
	http_type         *string
	status            *uint8
	addstatus         *int8
	application       *string
	interface_type    *uint8
	addinterface_type *int8
	interface_url     *string
	_config           *string
	create_time       *uint32
	addcreate_time    *int32
	update_time       *uint32
	addupdate_time    *int32
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*HttpRule, error)
	predicates        []predicate.HttpRule
}

var _ ent.Mutation = (*HttpRuleMutation)(nil)

// httpruleOption allows management of the mutation configuration using functional options.
type httpruleOption func(*HttpRuleMutation)

// newHttpRuleMutation creates new mutation for the HttpRule entity.
func newHttpRuleMutation(c config, op Op, opts ...httpruleOption) *HttpRuleMutation {
	m := &HttpRuleMutation{
		config:        c,
		op:            op,
		typ:           TypeHttpRule,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHttpRuleID sets the ID field of the mutation.
func withHttpRuleID(id uint32) httpruleOption {
	return func(m *HttpRuleMutation) {
		var (
			err   error
			once  sync.Once
			value *HttpRule
		)
		m.oldValue = func(ctx context.Context) (*HttpRule, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().HttpRule.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHttpRule sets the old HttpRule of the mutation.
func withHttpRule(node *HttpRule) httpruleOption {
	return func(m *HttpRuleMutation) {
		m.oldValue = func(context.Context) (*HttpRule, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HttpRuleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HttpRuleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of HttpRule entities.
func (m *HttpRuleMutation) SetID(id uint32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HttpRuleMutation) ID() (id uint32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HttpRuleMutation) IDs(ctx context.Context) ([]uint32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().HttpRule.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetGwURL sets the "gw_url" field.
func (m *HttpRuleMutation) SetGwURL(s string) {
	m.gw_url = &s
}

// GwURL returns the value of the "gw_url" field in the mutation.
func (m *HttpRuleMutation) GwURL() (r string, exists bool) {
	v := m.gw_url
	if v == nil {
		return
	}
	return *v, true
}

// OldGwURL returns the old "gw_url" field's value of the HttpRule entity.
// If the HttpRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HttpRuleMutation) OldGwURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGwURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGwURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGwURL: %w", err)
	}
	return oldValue.GwURL, nil
}

// ResetGwURL resets all changes to the "gw_url" field.
func (m *HttpRuleMutation) ResetGwURL() {
	m.gw_url = nil
}

// SetHTTPType sets the "http_type" field.
func (m *HttpRuleMutation) SetHTTPType(s string) {
	m.http_type = &s
}

// HTTPType returns the value of the "http_type" field in the mutation.
func (m *HttpRuleMutation) HTTPType() (r string, exists bool) {
	v := m.http_type
	if v == nil {
		return
	}
	return *v, true
}

// OldHTTPType returns the old "http_type" field's value of the HttpRule entity.
// If the HttpRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HttpRuleMutation) OldHTTPType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHTTPType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHTTPType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHTTPType: %w", err)
	}
	return oldValue.HTTPType, nil
}

// ResetHTTPType resets all changes to the "http_type" field.
func (m *HttpRuleMutation) ResetHTTPType() {
	m.http_type = nil
}

// SetStatus sets the "status" field.
func (m *HttpRuleMutation) SetStatus(u uint8) {
	m.status = &u
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *HttpRuleMutation) Status() (r uint8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the HttpRule entity.
// If the HttpRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HttpRuleMutation) OldStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds u to the "status" field.
func (m *HttpRuleMutation) AddStatus(u int8) {
	if m.addstatus != nil {
		*m.addstatus += u
	} else {
		m.addstatus = &u
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *HttpRuleMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *HttpRuleMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetApplication sets the "application" field.
func (m *HttpRuleMutation) SetApplication(s string) {
	m.application = &s
}

// Application returns the value of the "application" field in the mutation.
func (m *HttpRuleMutation) Application() (r string, exists bool) {
	v := m.application
	if v == nil {
		return
	}
	return *v, true
}

// OldApplication returns the old "application" field's value of the HttpRule entity.
// If the HttpRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HttpRuleMutation) OldApplication(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApplication is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApplication requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApplication: %w", err)
	}
	return oldValue.Application, nil
}

// ResetApplication resets all changes to the "application" field.
func (m *HttpRuleMutation) ResetApplication() {
	m.application = nil
}

// SetInterfaceType sets the "interface_type" field.
func (m *HttpRuleMutation) SetInterfaceType(u uint8) {
	m.interface_type = &u
	m.addinterface_type = nil
}

// InterfaceType returns the value of the "interface_type" field in the mutation.
func (m *HttpRuleMutation) InterfaceType() (r uint8, exists bool) {
	v := m.interface_type
	if v == nil {
		return
	}
	return *v, true
}

// OldInterfaceType returns the old "interface_type" field's value of the HttpRule entity.
// If the HttpRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HttpRuleMutation) OldInterfaceType(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInterfaceType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInterfaceType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInterfaceType: %w", err)
	}
	return oldValue.InterfaceType, nil
}

// AddInterfaceType adds u to the "interface_type" field.
func (m *HttpRuleMutation) AddInterfaceType(u int8) {
	if m.addinterface_type != nil {
		*m.addinterface_type += u
	} else {
		m.addinterface_type = &u
	}
}

// AddedInterfaceType returns the value that was added to the "interface_type" field in this mutation.
func (m *HttpRuleMutation) AddedInterfaceType() (r int8, exists bool) {
	v := m.addinterface_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetInterfaceType resets all changes to the "interface_type" field.
func (m *HttpRuleMutation) ResetInterfaceType() {
	m.interface_type = nil
	m.addinterface_type = nil
}

// SetInterfaceURL sets the "interface_url" field.
func (m *HttpRuleMutation) SetInterfaceURL(s string) {
	m.interface_url = &s
}

// InterfaceURL returns the value of the "interface_url" field in the mutation.
func (m *HttpRuleMutation) InterfaceURL() (r string, exists bool) {
	v := m.interface_url
	if v == nil {
		return
	}
	return *v, true
}

// OldInterfaceURL returns the old "interface_url" field's value of the HttpRule entity.
// If the HttpRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HttpRuleMutation) OldInterfaceURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInterfaceURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInterfaceURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInterfaceURL: %w", err)
	}
	return oldValue.InterfaceURL, nil
}

// ResetInterfaceURL resets all changes to the "interface_url" field.
func (m *HttpRuleMutation) ResetInterfaceURL() {
	m.interface_url = nil
}

// SetConfig sets the "config" field.
func (m *HttpRuleMutation) SetConfig(s string) {
	m._config = &s
}

// Config returns the value of the "config" field in the mutation.
func (m *HttpRuleMutation) Config() (r string, exists bool) {
	v := m._config
	if v == nil {
		return
	}
	return *v, true
}

// OldConfig returns the old "config" field's value of the HttpRule entity.
// If the HttpRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HttpRuleMutation) OldConfig(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfig is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfig requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfig: %w", err)
	}
	return oldValue.Config, nil
}

// ResetConfig resets all changes to the "config" field.
func (m *HttpRuleMutation) ResetConfig() {
	m._config = nil
}

// SetCreateTime sets the "create_time" field.
func (m *HttpRuleMutation) SetCreateTime(u uint32) {
	m.create_time = &u
	m.addcreate_time = nil
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *HttpRuleMutation) CreateTime() (r uint32, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the HttpRule entity.
// If the HttpRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HttpRuleMutation) OldCreateTime(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// AddCreateTime adds u to the "create_time" field.
func (m *HttpRuleMutation) AddCreateTime(u int32) {
	if m.addcreate_time != nil {
		*m.addcreate_time += u
	} else {
		m.addcreate_time = &u
	}
}

// AddedCreateTime returns the value that was added to the "create_time" field in this mutation.
func (m *HttpRuleMutation) AddedCreateTime() (r int32, exists bool) {
	v := m.addcreate_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *HttpRuleMutation) ResetCreateTime() {
	m.create_time = nil
	m.addcreate_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *HttpRuleMutation) SetUpdateTime(u uint32) {
	m.update_time = &u
	m.addupdate_time = nil
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *HttpRuleMutation) UpdateTime() (r uint32, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the HttpRule entity.
// If the HttpRule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HttpRuleMutation) OldUpdateTime(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// AddUpdateTime adds u to the "update_time" field.
func (m *HttpRuleMutation) AddUpdateTime(u int32) {
	if m.addupdate_time != nil {
		*m.addupdate_time += u
	} else {
		m.addupdate_time = &u
	}
}

// AddedUpdateTime returns the value that was added to the "update_time" field in this mutation.
func (m *HttpRuleMutation) AddedUpdateTime() (r int32, exists bool) {
	v := m.addupdate_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *HttpRuleMutation) ResetUpdateTime() {
	m.update_time = nil
	m.addupdate_time = nil
}

// Where appends a list predicates to the HttpRuleMutation builder.
func (m *HttpRuleMutation) Where(ps ...predicate.HttpRule) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HttpRuleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HttpRuleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.HttpRule, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HttpRuleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HttpRuleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (HttpRule).
func (m *HttpRuleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HttpRuleMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.gw_url != nil {
		fields = append(fields, httprule.FieldGwURL)
	}
	if m.http_type != nil {
		fields = append(fields, httprule.FieldHTTPType)
	}
	if m.status != nil {
		fields = append(fields, httprule.FieldStatus)
	}
	if m.application != nil {
		fields = append(fields, httprule.FieldApplication)
	}
	if m.interface_type != nil {
		fields = append(fields, httprule.FieldInterfaceType)
	}
	if m.interface_url != nil {
		fields = append(fields, httprule.FieldInterfaceURL)
	}
	if m._config != nil {
		fields = append(fields, httprule.FieldConfig)
	}
	if m.create_time != nil {
		fields = append(fields, httprule.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, httprule.FieldUpdateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HttpRuleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case httprule.FieldGwURL:
		return m.GwURL()
	case httprule.FieldHTTPType:
		return m.HTTPType()
	case httprule.FieldStatus:
		return m.Status()
	case httprule.FieldApplication:
		return m.Application()
	case httprule.FieldInterfaceType:
		return m.InterfaceType()
	case httprule.FieldInterfaceURL:
		return m.InterfaceURL()
	case httprule.FieldConfig:
		return m.Config()
	case httprule.FieldCreateTime:
		return m.CreateTime()
	case httprule.FieldUpdateTime:
		return m.UpdateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HttpRuleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case httprule.FieldGwURL:
		return m.OldGwURL(ctx)
	case httprule.FieldHTTPType:
		return m.OldHTTPType(ctx)
	case httprule.FieldStatus:
		return m.OldStatus(ctx)
	case httprule.FieldApplication:
		return m.OldApplication(ctx)
	case httprule.FieldInterfaceType:
		return m.OldInterfaceType(ctx)
	case httprule.FieldInterfaceURL:
		return m.OldInterfaceURL(ctx)
	case httprule.FieldConfig:
		return m.OldConfig(ctx)
	case httprule.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case httprule.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	}
	return nil, fmt.Errorf("unknown HttpRule field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HttpRuleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case httprule.FieldGwURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGwURL(v)
		return nil
	case httprule.FieldHTTPType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHTTPType(v)
		return nil
	case httprule.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case httprule.FieldApplication:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApplication(v)
		return nil
	case httprule.FieldInterfaceType:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInterfaceType(v)
		return nil
	case httprule.FieldInterfaceURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInterfaceURL(v)
		return nil
	case httprule.FieldConfig:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfig(v)
		return nil
	case httprule.FieldCreateTime:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case httprule.FieldUpdateTime:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown HttpRule field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HttpRuleMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, httprule.FieldStatus)
	}
	if m.addinterface_type != nil {
		fields = append(fields, httprule.FieldInterfaceType)
	}
	if m.addcreate_time != nil {
		fields = append(fields, httprule.FieldCreateTime)
	}
	if m.addupdate_time != nil {
		fields = append(fields, httprule.FieldUpdateTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HttpRuleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case httprule.FieldStatus:
		return m.AddedStatus()
	case httprule.FieldInterfaceType:
		return m.AddedInterfaceType()
	case httprule.FieldCreateTime:
		return m.AddedCreateTime()
	case httprule.FieldUpdateTime:
		return m.AddedUpdateTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HttpRuleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case httprule.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case httprule.FieldInterfaceType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInterfaceType(v)
		return nil
	case httprule.FieldCreateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateTime(v)
		return nil
	case httprule.FieldUpdateTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown HttpRule numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HttpRuleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HttpRuleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HttpRuleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown HttpRule nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HttpRuleMutation) ResetField(name string) error {
	switch name {
	case httprule.FieldGwURL:
		m.ResetGwURL()
		return nil
	case httprule.FieldHTTPType:
		m.ResetHTTPType()
		return nil
	case httprule.FieldStatus:
		m.ResetStatus()
		return nil
	case httprule.FieldApplication:
		m.ResetApplication()
		return nil
	case httprule.FieldInterfaceType:
		m.ResetInterfaceType()
		return nil
	case httprule.FieldInterfaceURL:
		m.ResetInterfaceURL()
		return nil
	case httprule.FieldConfig:
		m.ResetConfig()
		return nil
	case httprule.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case httprule.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	}
	return fmt.Errorf("unknown HttpRule field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HttpRuleMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HttpRuleMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HttpRuleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HttpRuleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HttpRuleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HttpRuleMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HttpRuleMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown HttpRule unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HttpRuleMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown HttpRule edge %s", name)
}
