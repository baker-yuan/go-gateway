// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/baker-yuan/go-gateway/go-gateway-admin/internal/data/ent/httprule"
)

// HttpRule is the model entity for the HttpRule schema.
type HttpRule struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// 网关接口
	GwURL string `json:"gw_url,omitempty"`
	// 接口类型
	HTTPType string `json:"http_type,omitempty"`
	// 接口状态 0-默认 1-上线 2-下线
	Status uint8 `json:"status,omitempty"`
	// 应用名称
	Application string `json:"application,omitempty"`
	// 接口协议 0-未知 1-http 2-https 3-gRPC 4-Double
	InterfaceType uint8 `json:"interface_type,omitempty"`
	// 接口方法
	InterfaceURL string `json:"interface_url,omitempty"`
	// 接口特殊配置json格式
	Config string `json:"config,omitempty"`
	// 创建时间
	CreateTime uint32 `json:"create_time,omitempty"`
	// 修改时间
	UpdateTime   uint32 `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HttpRule) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case httprule.FieldID, httprule.FieldStatus, httprule.FieldInterfaceType, httprule.FieldCreateTime, httprule.FieldUpdateTime:
			values[i] = new(sql.NullInt64)
		case httprule.FieldGwURL, httprule.FieldHTTPType, httprule.FieldApplication, httprule.FieldInterfaceURL, httprule.FieldConfig:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HttpRule fields.
func (hr *HttpRule) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case httprule.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			hr.ID = uint32(value.Int64)
		case httprule.FieldGwURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gw_url", values[i])
			} else if value.Valid {
				hr.GwURL = value.String
			}
		case httprule.FieldHTTPType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field http_type", values[i])
			} else if value.Valid {
				hr.HTTPType = value.String
			}
		case httprule.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				hr.Status = uint8(value.Int64)
			}
		case httprule.FieldApplication:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field application", values[i])
			} else if value.Valid {
				hr.Application = value.String
			}
		case httprule.FieldInterfaceType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field interface_type", values[i])
			} else if value.Valid {
				hr.InterfaceType = uint8(value.Int64)
			}
		case httprule.FieldInterfaceURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field interface_url", values[i])
			} else if value.Valid {
				hr.InterfaceURL = value.String
			}
		case httprule.FieldConfig:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value.Valid {
				hr.Config = value.String
			}
		case httprule.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				hr.CreateTime = uint32(value.Int64)
			}
		case httprule.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				hr.UpdateTime = uint32(value.Int64)
			}
		default:
			hr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HttpRule.
// This includes values selected through modifiers, order, etc.
func (hr *HttpRule) Value(name string) (ent.Value, error) {
	return hr.selectValues.Get(name)
}

// Update returns a builder for updating this HttpRule.
// Note that you need to call HttpRule.Unwrap() before calling this method if this HttpRule
// was returned from a transaction, and the transaction was committed or rolled back.
func (hr *HttpRule) Update() *HttpRuleUpdateOne {
	return NewHttpRuleClient(hr.config).UpdateOne(hr)
}

// Unwrap unwraps the HttpRule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hr *HttpRule) Unwrap() *HttpRule {
	_tx, ok := hr.config.driver.(*txDriver)
	if !ok {
		panic("ent: HttpRule is not a transactional entity")
	}
	hr.config.driver = _tx.drv
	return hr
}

// String implements the fmt.Stringer.
func (hr *HttpRule) String() string {
	var builder strings.Builder
	builder.WriteString("HttpRule(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hr.ID))
	builder.WriteString("gw_url=")
	builder.WriteString(hr.GwURL)
	builder.WriteString(", ")
	builder.WriteString("http_type=")
	builder.WriteString(hr.HTTPType)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", hr.Status))
	builder.WriteString(", ")
	builder.WriteString("application=")
	builder.WriteString(hr.Application)
	builder.WriteString(", ")
	builder.WriteString("interface_type=")
	builder.WriteString(fmt.Sprintf("%v", hr.InterfaceType))
	builder.WriteString(", ")
	builder.WriteString("interface_url=")
	builder.WriteString(hr.InterfaceURL)
	builder.WriteString(", ")
	builder.WriteString("config=")
	builder.WriteString(hr.Config)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(fmt.Sprintf("%v", hr.CreateTime))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(fmt.Sprintf("%v", hr.UpdateTime))
	builder.WriteByte(')')
	return builder.String()
}

// HttpRules is a parsable slice of HttpRule.
type HttpRules []*HttpRule
