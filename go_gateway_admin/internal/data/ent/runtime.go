// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/baker-yuan/go-gateway/go-gateway-admin/internal/data/ent/httprule"
	"github.com/baker-yuan/go-gateway/go-gateway-admin/internal/data/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	httpruleFields := schema.HttpRule{}.Fields()
	_ = httpruleFields
	// httpruleDescGwURL is the schema descriptor for gw_url field.
	httpruleDescGwURL := httpruleFields[1].Descriptor()
	// httprule.DefaultGwURL holds the default value on creation for the gw_url field.
	httprule.DefaultGwURL = httpruleDescGwURL.Default.(string)
	// httprule.GwURLValidator is a validator for the "gw_url" field. It is called by the builders before save.
	httprule.GwURLValidator = func() func(string) error {
		validators := httpruleDescGwURL.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(gw_url string) error {
			for _, fn := range fns {
				if err := fn(gw_url); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// httpruleDescHTTPType is the schema descriptor for http_type field.
	httpruleDescHTTPType := httpruleFields[2].Descriptor()
	// httprule.DefaultHTTPType holds the default value on creation for the http_type field.
	httprule.DefaultHTTPType = httpruleDescHTTPType.Default.(string)
	// httprule.HTTPTypeValidator is a validator for the "http_type" field. It is called by the builders before save.
	httprule.HTTPTypeValidator = func() func(string) error {
		validators := httpruleDescHTTPType.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(http_type string) error {
			for _, fn := range fns {
				if err := fn(http_type); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// httpruleDescStatus is the schema descriptor for status field.
	httpruleDescStatus := httpruleFields[3].Descriptor()
	// httprule.DefaultStatus holds the default value on creation for the status field.
	httprule.DefaultStatus = httpruleDescStatus.Default.(uint8)
	// httpruleDescApplication is the schema descriptor for application field.
	httpruleDescApplication := httpruleFields[4].Descriptor()
	// httprule.ApplicationValidator is a validator for the "application" field. It is called by the builders before save.
	httprule.ApplicationValidator = func() func(string) error {
		validators := httpruleDescApplication.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(application string) error {
			for _, fn := range fns {
				if err := fn(application); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// httpruleDescInterfaceType is the schema descriptor for interface_type field.
	httpruleDescInterfaceType := httpruleFields[5].Descriptor()
	// httprule.DefaultInterfaceType holds the default value on creation for the interface_type field.
	httprule.DefaultInterfaceType = httpruleDescInterfaceType.Default.(uint8)
	// httpruleDescInterfaceURL is the schema descriptor for interface_url field.
	httpruleDescInterfaceURL := httpruleFields[6].Descriptor()
	// httprule.DefaultInterfaceURL holds the default value on creation for the interface_url field.
	httprule.DefaultInterfaceURL = httpruleDescInterfaceURL.Default.(string)
	// httprule.InterfaceURLValidator is a validator for the "interface_url" field. It is called by the builders before save.
	httprule.InterfaceURLValidator = func() func(string) error {
		validators := httpruleDescInterfaceURL.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(interface_url string) error {
			for _, fn := range fns {
				if err := fn(interface_url); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// httpruleDescConfig is the schema descriptor for config field.
	httpruleDescConfig := httpruleFields[7].Descriptor()
	// httprule.DefaultConfig holds the default value on creation for the config field.
	httprule.DefaultConfig = httpruleDescConfig.Default.(string)
	// httprule.ConfigValidator is a validator for the "config" field. It is called by the builders before save.
	httprule.ConfigValidator = func() func(string) error {
		validators := httpruleDescConfig.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_config string) error {
			for _, fn := range fns {
				if err := fn(_config); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// httpruleDescCreateTime is the schema descriptor for create_time field.
	httpruleDescCreateTime := httpruleFields[8].Descriptor()
	// httprule.DefaultCreateTime holds the default value on creation for the create_time field.
	httprule.DefaultCreateTime = httpruleDescCreateTime.Default.(uint32)
	// httpruleDescUpdateTime is the schema descriptor for update_time field.
	httpruleDescUpdateTime := httpruleFields[9].Descriptor()
	// httprule.DefaultUpdateTime holds the default value on creation for the update_time field.
	httprule.DefaultUpdateTime = httpruleDescUpdateTime.Default.(uint32)
}
