// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/baker-yuan/go-gateway/go-gateway-admin/internal/data/ent/httprule"
)

// HttpRuleCreate is the builder for creating a HttpRule entity.
type HttpRuleCreate struct {
	config
	mutation *HttpRuleMutation
	hooks    []Hook
}

// SetGwURL sets the "gw_url" field.
func (hrc *HttpRuleCreate) SetGwURL(s string) *HttpRuleCreate {
	hrc.mutation.SetGwURL(s)
	return hrc
}

// SetNillableGwURL sets the "gw_url" field if the given value is not nil.
func (hrc *HttpRuleCreate) SetNillableGwURL(s *string) *HttpRuleCreate {
	if s != nil {
		hrc.SetGwURL(*s)
	}
	return hrc
}

// SetHTTPType sets the "http_type" field.
func (hrc *HttpRuleCreate) SetHTTPType(s string) *HttpRuleCreate {
	hrc.mutation.SetHTTPType(s)
	return hrc
}

// SetNillableHTTPType sets the "http_type" field if the given value is not nil.
func (hrc *HttpRuleCreate) SetNillableHTTPType(s *string) *HttpRuleCreate {
	if s != nil {
		hrc.SetHTTPType(*s)
	}
	return hrc
}

// SetStatus sets the "status" field.
func (hrc *HttpRuleCreate) SetStatus(u uint8) *HttpRuleCreate {
	hrc.mutation.SetStatus(u)
	return hrc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (hrc *HttpRuleCreate) SetNillableStatus(u *uint8) *HttpRuleCreate {
	if u != nil {
		hrc.SetStatus(*u)
	}
	return hrc
}

// SetApplication sets the "application" field.
func (hrc *HttpRuleCreate) SetApplication(s string) *HttpRuleCreate {
	hrc.mutation.SetApplication(s)
	return hrc
}

// SetInterfaceType sets the "interface_type" field.
func (hrc *HttpRuleCreate) SetInterfaceType(u uint8) *HttpRuleCreate {
	hrc.mutation.SetInterfaceType(u)
	return hrc
}

// SetNillableInterfaceType sets the "interface_type" field if the given value is not nil.
func (hrc *HttpRuleCreate) SetNillableInterfaceType(u *uint8) *HttpRuleCreate {
	if u != nil {
		hrc.SetInterfaceType(*u)
	}
	return hrc
}

// SetInterfaceURL sets the "interface_url" field.
func (hrc *HttpRuleCreate) SetInterfaceURL(s string) *HttpRuleCreate {
	hrc.mutation.SetInterfaceURL(s)
	return hrc
}

// SetNillableInterfaceURL sets the "interface_url" field if the given value is not nil.
func (hrc *HttpRuleCreate) SetNillableInterfaceURL(s *string) *HttpRuleCreate {
	if s != nil {
		hrc.SetInterfaceURL(*s)
	}
	return hrc
}

// SetConfig sets the "config" field.
func (hrc *HttpRuleCreate) SetConfig(s string) *HttpRuleCreate {
	hrc.mutation.SetConfig(s)
	return hrc
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (hrc *HttpRuleCreate) SetNillableConfig(s *string) *HttpRuleCreate {
	if s != nil {
		hrc.SetConfig(*s)
	}
	return hrc
}

// SetCreateTime sets the "create_time" field.
func (hrc *HttpRuleCreate) SetCreateTime(u uint32) *HttpRuleCreate {
	hrc.mutation.SetCreateTime(u)
	return hrc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (hrc *HttpRuleCreate) SetNillableCreateTime(u *uint32) *HttpRuleCreate {
	if u != nil {
		hrc.SetCreateTime(*u)
	}
	return hrc
}

// SetUpdateTime sets the "update_time" field.
func (hrc *HttpRuleCreate) SetUpdateTime(u uint32) *HttpRuleCreate {
	hrc.mutation.SetUpdateTime(u)
	return hrc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (hrc *HttpRuleCreate) SetNillableUpdateTime(u *uint32) *HttpRuleCreate {
	if u != nil {
		hrc.SetUpdateTime(*u)
	}
	return hrc
}

// SetID sets the "id" field.
func (hrc *HttpRuleCreate) SetID(u uint32) *HttpRuleCreate {
	hrc.mutation.SetID(u)
	return hrc
}

// Mutation returns the HttpRuleMutation object of the builder.
func (hrc *HttpRuleCreate) Mutation() *HttpRuleMutation {
	return hrc.mutation
}

// Save creates the HttpRule in the database.
func (hrc *HttpRuleCreate) Save(ctx context.Context) (*HttpRule, error) {
	hrc.defaults()
	return withHooks[*HttpRule, HttpRuleMutation](ctx, hrc.sqlSave, hrc.mutation, hrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hrc *HttpRuleCreate) SaveX(ctx context.Context) *HttpRule {
	v, err := hrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hrc *HttpRuleCreate) Exec(ctx context.Context) error {
	_, err := hrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hrc *HttpRuleCreate) ExecX(ctx context.Context) {
	if err := hrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hrc *HttpRuleCreate) defaults() {
	if _, ok := hrc.mutation.GwURL(); !ok {
		v := httprule.DefaultGwURL
		hrc.mutation.SetGwURL(v)
	}
	if _, ok := hrc.mutation.HTTPType(); !ok {
		v := httprule.DefaultHTTPType
		hrc.mutation.SetHTTPType(v)
	}
	if _, ok := hrc.mutation.Status(); !ok {
		v := httprule.DefaultStatus
		hrc.mutation.SetStatus(v)
	}
	if _, ok := hrc.mutation.InterfaceType(); !ok {
		v := httprule.DefaultInterfaceType
		hrc.mutation.SetInterfaceType(v)
	}
	if _, ok := hrc.mutation.InterfaceURL(); !ok {
		v := httprule.DefaultInterfaceURL
		hrc.mutation.SetInterfaceURL(v)
	}
	if _, ok := hrc.mutation.Config(); !ok {
		v := httprule.DefaultConfig
		hrc.mutation.SetConfig(v)
	}
	if _, ok := hrc.mutation.CreateTime(); !ok {
		v := httprule.DefaultCreateTime
		hrc.mutation.SetCreateTime(v)
	}
	if _, ok := hrc.mutation.UpdateTime(); !ok {
		v := httprule.DefaultUpdateTime
		hrc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hrc *HttpRuleCreate) check() error {
	if _, ok := hrc.mutation.GwURL(); !ok {
		return &ValidationError{Name: "gw_url", err: errors.New(`ent: missing required field "HttpRule.gw_url"`)}
	}
	if v, ok := hrc.mutation.GwURL(); ok {
		if err := httprule.GwURLValidator(v); err != nil {
			return &ValidationError{Name: "gw_url", err: fmt.Errorf(`ent: validator failed for field "HttpRule.gw_url": %w`, err)}
		}
	}
	if _, ok := hrc.mutation.HTTPType(); !ok {
		return &ValidationError{Name: "http_type", err: errors.New(`ent: missing required field "HttpRule.http_type"`)}
	}
	if v, ok := hrc.mutation.HTTPType(); ok {
		if err := httprule.HTTPTypeValidator(v); err != nil {
			return &ValidationError{Name: "http_type", err: fmt.Errorf(`ent: validator failed for field "HttpRule.http_type": %w`, err)}
		}
	}
	if _, ok := hrc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "HttpRule.status"`)}
	}
	if _, ok := hrc.mutation.Application(); !ok {
		return &ValidationError{Name: "application", err: errors.New(`ent: missing required field "HttpRule.application"`)}
	}
	if v, ok := hrc.mutation.Application(); ok {
		if err := httprule.ApplicationValidator(v); err != nil {
			return &ValidationError{Name: "application", err: fmt.Errorf(`ent: validator failed for field "HttpRule.application": %w`, err)}
		}
	}
	if _, ok := hrc.mutation.InterfaceType(); !ok {
		return &ValidationError{Name: "interface_type", err: errors.New(`ent: missing required field "HttpRule.interface_type"`)}
	}
	if _, ok := hrc.mutation.InterfaceURL(); !ok {
		return &ValidationError{Name: "interface_url", err: errors.New(`ent: missing required field "HttpRule.interface_url"`)}
	}
	if v, ok := hrc.mutation.InterfaceURL(); ok {
		if err := httprule.InterfaceURLValidator(v); err != nil {
			return &ValidationError{Name: "interface_url", err: fmt.Errorf(`ent: validator failed for field "HttpRule.interface_url": %w`, err)}
		}
	}
	if _, ok := hrc.mutation.Config(); !ok {
		return &ValidationError{Name: "config", err: errors.New(`ent: missing required field "HttpRule.config"`)}
	}
	if v, ok := hrc.mutation.Config(); ok {
		if err := httprule.ConfigValidator(v); err != nil {
			return &ValidationError{Name: "config", err: fmt.Errorf(`ent: validator failed for field "HttpRule.config": %w`, err)}
		}
	}
	if _, ok := hrc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "HttpRule.create_time"`)}
	}
	if _, ok := hrc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "HttpRule.update_time"`)}
	}
	return nil
}

func (hrc *HttpRuleCreate) sqlSave(ctx context.Context) (*HttpRule, error) {
	if err := hrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	hrc.mutation.id = &_node.ID
	hrc.mutation.done = true
	return _node, nil
}

func (hrc *HttpRuleCreate) createSpec() (*HttpRule, *sqlgraph.CreateSpec) {
	var (
		_node = &HttpRule{config: hrc.config}
		_spec = sqlgraph.NewCreateSpec(httprule.Table, sqlgraph.NewFieldSpec(httprule.FieldID, field.TypeUint32))
	)
	if id, ok := hrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := hrc.mutation.GwURL(); ok {
		_spec.SetField(httprule.FieldGwURL, field.TypeString, value)
		_node.GwURL = value
	}
	if value, ok := hrc.mutation.HTTPType(); ok {
		_spec.SetField(httprule.FieldHTTPType, field.TypeString, value)
		_node.HTTPType = value
	}
	if value, ok := hrc.mutation.Status(); ok {
		_spec.SetField(httprule.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := hrc.mutation.Application(); ok {
		_spec.SetField(httprule.FieldApplication, field.TypeString, value)
		_node.Application = value
	}
	if value, ok := hrc.mutation.InterfaceType(); ok {
		_spec.SetField(httprule.FieldInterfaceType, field.TypeUint8, value)
		_node.InterfaceType = value
	}
	if value, ok := hrc.mutation.InterfaceURL(); ok {
		_spec.SetField(httprule.FieldInterfaceURL, field.TypeString, value)
		_node.InterfaceURL = value
	}
	if value, ok := hrc.mutation.Config(); ok {
		_spec.SetField(httprule.FieldConfig, field.TypeString, value)
		_node.Config = value
	}
	if value, ok := hrc.mutation.CreateTime(); ok {
		_spec.SetField(httprule.FieldCreateTime, field.TypeUint32, value)
		_node.CreateTime = value
	}
	if value, ok := hrc.mutation.UpdateTime(); ok {
		_spec.SetField(httprule.FieldUpdateTime, field.TypeUint32, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// HttpRuleCreateBulk is the builder for creating many HttpRule entities in bulk.
type HttpRuleCreateBulk struct {
	config
	builders []*HttpRuleCreate
}

// Save creates the HttpRule entities in the database.
func (hrcb *HttpRuleCreateBulk) Save(ctx context.Context) ([]*HttpRule, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hrcb.builders))
	nodes := make([]*HttpRule, len(hrcb.builders))
	mutators := make([]Mutator, len(hrcb.builders))
	for i := range hrcb.builders {
		func(i int, root context.Context) {
			builder := hrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HttpRuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hrcb *HttpRuleCreateBulk) SaveX(ctx context.Context) []*HttpRule {
	v, err := hrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hrcb *HttpRuleCreateBulk) Exec(ctx context.Context) error {
	_, err := hrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hrcb *HttpRuleCreateBulk) ExecX(ctx context.Context) {
	if err := hrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
