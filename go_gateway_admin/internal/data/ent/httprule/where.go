// Code generated by ent, DO NOT EDIT.

package httprule

import (
	"entgo.io/ent/dialect/sql"
	"github.com/baker-yuan/go-gateway/go-gateway-admin/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldLTE(FieldID, id))
}

// GwURL applies equality check predicate on the "gw_url" field. It's identical to GwURLEQ.
func GwURL(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldEQ(FieldGwURL, v))
}

// HTTPType applies equality check predicate on the "http_type" field. It's identical to HTTPTypeEQ.
func HTTPType(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldEQ(FieldHTTPType, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldEQ(FieldStatus, v))
}

// Application applies equality check predicate on the "application" field. It's identical to ApplicationEQ.
func Application(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldEQ(FieldApplication, v))
}

// InterfaceType applies equality check predicate on the "interface_type" field. It's identical to InterfaceTypeEQ.
func InterfaceType(v uint8) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldEQ(FieldInterfaceType, v))
}

// InterfaceURL applies equality check predicate on the "interface_url" field. It's identical to InterfaceURLEQ.
func InterfaceURL(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldEQ(FieldInterfaceURL, v))
}

// Config applies equality check predicate on the "config" field. It's identical to ConfigEQ.
func Config(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldEQ(FieldConfig, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v uint32) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v uint32) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldEQ(FieldUpdateTime, v))
}

// GwURLEQ applies the EQ predicate on the "gw_url" field.
func GwURLEQ(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldEQ(FieldGwURL, v))
}

// GwURLNEQ applies the NEQ predicate on the "gw_url" field.
func GwURLNEQ(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldNEQ(FieldGwURL, v))
}

// GwURLIn applies the In predicate on the "gw_url" field.
func GwURLIn(vs ...string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldIn(FieldGwURL, vs...))
}

// GwURLNotIn applies the NotIn predicate on the "gw_url" field.
func GwURLNotIn(vs ...string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldNotIn(FieldGwURL, vs...))
}

// GwURLGT applies the GT predicate on the "gw_url" field.
func GwURLGT(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldGT(FieldGwURL, v))
}

// GwURLGTE applies the GTE predicate on the "gw_url" field.
func GwURLGTE(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldGTE(FieldGwURL, v))
}

// GwURLLT applies the LT predicate on the "gw_url" field.
func GwURLLT(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldLT(FieldGwURL, v))
}

// GwURLLTE applies the LTE predicate on the "gw_url" field.
func GwURLLTE(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldLTE(FieldGwURL, v))
}

// GwURLContains applies the Contains predicate on the "gw_url" field.
func GwURLContains(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldContains(FieldGwURL, v))
}

// GwURLHasPrefix applies the HasPrefix predicate on the "gw_url" field.
func GwURLHasPrefix(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldHasPrefix(FieldGwURL, v))
}

// GwURLHasSuffix applies the HasSuffix predicate on the "gw_url" field.
func GwURLHasSuffix(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldHasSuffix(FieldGwURL, v))
}

// GwURLEqualFold applies the EqualFold predicate on the "gw_url" field.
func GwURLEqualFold(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldEqualFold(FieldGwURL, v))
}

// GwURLContainsFold applies the ContainsFold predicate on the "gw_url" field.
func GwURLContainsFold(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldContainsFold(FieldGwURL, v))
}

// HTTPTypeEQ applies the EQ predicate on the "http_type" field.
func HTTPTypeEQ(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldEQ(FieldHTTPType, v))
}

// HTTPTypeNEQ applies the NEQ predicate on the "http_type" field.
func HTTPTypeNEQ(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldNEQ(FieldHTTPType, v))
}

// HTTPTypeIn applies the In predicate on the "http_type" field.
func HTTPTypeIn(vs ...string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldIn(FieldHTTPType, vs...))
}

// HTTPTypeNotIn applies the NotIn predicate on the "http_type" field.
func HTTPTypeNotIn(vs ...string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldNotIn(FieldHTTPType, vs...))
}

// HTTPTypeGT applies the GT predicate on the "http_type" field.
func HTTPTypeGT(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldGT(FieldHTTPType, v))
}

// HTTPTypeGTE applies the GTE predicate on the "http_type" field.
func HTTPTypeGTE(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldGTE(FieldHTTPType, v))
}

// HTTPTypeLT applies the LT predicate on the "http_type" field.
func HTTPTypeLT(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldLT(FieldHTTPType, v))
}

// HTTPTypeLTE applies the LTE predicate on the "http_type" field.
func HTTPTypeLTE(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldLTE(FieldHTTPType, v))
}

// HTTPTypeContains applies the Contains predicate on the "http_type" field.
func HTTPTypeContains(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldContains(FieldHTTPType, v))
}

// HTTPTypeHasPrefix applies the HasPrefix predicate on the "http_type" field.
func HTTPTypeHasPrefix(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldHasPrefix(FieldHTTPType, v))
}

// HTTPTypeHasSuffix applies the HasSuffix predicate on the "http_type" field.
func HTTPTypeHasSuffix(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldHasSuffix(FieldHTTPType, v))
}

// HTTPTypeEqualFold applies the EqualFold predicate on the "http_type" field.
func HTTPTypeEqualFold(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldEqualFold(FieldHTTPType, v))
}

// HTTPTypeContainsFold applies the ContainsFold predicate on the "http_type" field.
func HTTPTypeContainsFold(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldContainsFold(FieldHTTPType, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldLTE(FieldStatus, v))
}

// ApplicationEQ applies the EQ predicate on the "application" field.
func ApplicationEQ(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldEQ(FieldApplication, v))
}

// ApplicationNEQ applies the NEQ predicate on the "application" field.
func ApplicationNEQ(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldNEQ(FieldApplication, v))
}

// ApplicationIn applies the In predicate on the "application" field.
func ApplicationIn(vs ...string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldIn(FieldApplication, vs...))
}

// ApplicationNotIn applies the NotIn predicate on the "application" field.
func ApplicationNotIn(vs ...string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldNotIn(FieldApplication, vs...))
}

// ApplicationGT applies the GT predicate on the "application" field.
func ApplicationGT(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldGT(FieldApplication, v))
}

// ApplicationGTE applies the GTE predicate on the "application" field.
func ApplicationGTE(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldGTE(FieldApplication, v))
}

// ApplicationLT applies the LT predicate on the "application" field.
func ApplicationLT(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldLT(FieldApplication, v))
}

// ApplicationLTE applies the LTE predicate on the "application" field.
func ApplicationLTE(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldLTE(FieldApplication, v))
}

// ApplicationContains applies the Contains predicate on the "application" field.
func ApplicationContains(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldContains(FieldApplication, v))
}

// ApplicationHasPrefix applies the HasPrefix predicate on the "application" field.
func ApplicationHasPrefix(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldHasPrefix(FieldApplication, v))
}

// ApplicationHasSuffix applies the HasSuffix predicate on the "application" field.
func ApplicationHasSuffix(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldHasSuffix(FieldApplication, v))
}

// ApplicationEqualFold applies the EqualFold predicate on the "application" field.
func ApplicationEqualFold(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldEqualFold(FieldApplication, v))
}

// ApplicationContainsFold applies the ContainsFold predicate on the "application" field.
func ApplicationContainsFold(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldContainsFold(FieldApplication, v))
}

// InterfaceTypeEQ applies the EQ predicate on the "interface_type" field.
func InterfaceTypeEQ(v uint8) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldEQ(FieldInterfaceType, v))
}

// InterfaceTypeNEQ applies the NEQ predicate on the "interface_type" field.
func InterfaceTypeNEQ(v uint8) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldNEQ(FieldInterfaceType, v))
}

// InterfaceTypeIn applies the In predicate on the "interface_type" field.
func InterfaceTypeIn(vs ...uint8) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldIn(FieldInterfaceType, vs...))
}

// InterfaceTypeNotIn applies the NotIn predicate on the "interface_type" field.
func InterfaceTypeNotIn(vs ...uint8) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldNotIn(FieldInterfaceType, vs...))
}

// InterfaceTypeGT applies the GT predicate on the "interface_type" field.
func InterfaceTypeGT(v uint8) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldGT(FieldInterfaceType, v))
}

// InterfaceTypeGTE applies the GTE predicate on the "interface_type" field.
func InterfaceTypeGTE(v uint8) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldGTE(FieldInterfaceType, v))
}

// InterfaceTypeLT applies the LT predicate on the "interface_type" field.
func InterfaceTypeLT(v uint8) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldLT(FieldInterfaceType, v))
}

// InterfaceTypeLTE applies the LTE predicate on the "interface_type" field.
func InterfaceTypeLTE(v uint8) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldLTE(FieldInterfaceType, v))
}

// InterfaceURLEQ applies the EQ predicate on the "interface_url" field.
func InterfaceURLEQ(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldEQ(FieldInterfaceURL, v))
}

// InterfaceURLNEQ applies the NEQ predicate on the "interface_url" field.
func InterfaceURLNEQ(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldNEQ(FieldInterfaceURL, v))
}

// InterfaceURLIn applies the In predicate on the "interface_url" field.
func InterfaceURLIn(vs ...string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldIn(FieldInterfaceURL, vs...))
}

// InterfaceURLNotIn applies the NotIn predicate on the "interface_url" field.
func InterfaceURLNotIn(vs ...string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldNotIn(FieldInterfaceURL, vs...))
}

// InterfaceURLGT applies the GT predicate on the "interface_url" field.
func InterfaceURLGT(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldGT(FieldInterfaceURL, v))
}

// InterfaceURLGTE applies the GTE predicate on the "interface_url" field.
func InterfaceURLGTE(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldGTE(FieldInterfaceURL, v))
}

// InterfaceURLLT applies the LT predicate on the "interface_url" field.
func InterfaceURLLT(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldLT(FieldInterfaceURL, v))
}

// InterfaceURLLTE applies the LTE predicate on the "interface_url" field.
func InterfaceURLLTE(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldLTE(FieldInterfaceURL, v))
}

// InterfaceURLContains applies the Contains predicate on the "interface_url" field.
func InterfaceURLContains(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldContains(FieldInterfaceURL, v))
}

// InterfaceURLHasPrefix applies the HasPrefix predicate on the "interface_url" field.
func InterfaceURLHasPrefix(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldHasPrefix(FieldInterfaceURL, v))
}

// InterfaceURLHasSuffix applies the HasSuffix predicate on the "interface_url" field.
func InterfaceURLHasSuffix(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldHasSuffix(FieldInterfaceURL, v))
}

// InterfaceURLEqualFold applies the EqualFold predicate on the "interface_url" field.
func InterfaceURLEqualFold(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldEqualFold(FieldInterfaceURL, v))
}

// InterfaceURLContainsFold applies the ContainsFold predicate on the "interface_url" field.
func InterfaceURLContainsFold(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldContainsFold(FieldInterfaceURL, v))
}

// ConfigEQ applies the EQ predicate on the "config" field.
func ConfigEQ(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldEQ(FieldConfig, v))
}

// ConfigNEQ applies the NEQ predicate on the "config" field.
func ConfigNEQ(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldNEQ(FieldConfig, v))
}

// ConfigIn applies the In predicate on the "config" field.
func ConfigIn(vs ...string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldIn(FieldConfig, vs...))
}

// ConfigNotIn applies the NotIn predicate on the "config" field.
func ConfigNotIn(vs ...string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldNotIn(FieldConfig, vs...))
}

// ConfigGT applies the GT predicate on the "config" field.
func ConfigGT(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldGT(FieldConfig, v))
}

// ConfigGTE applies the GTE predicate on the "config" field.
func ConfigGTE(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldGTE(FieldConfig, v))
}

// ConfigLT applies the LT predicate on the "config" field.
func ConfigLT(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldLT(FieldConfig, v))
}

// ConfigLTE applies the LTE predicate on the "config" field.
func ConfigLTE(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldLTE(FieldConfig, v))
}

// ConfigContains applies the Contains predicate on the "config" field.
func ConfigContains(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldContains(FieldConfig, v))
}

// ConfigHasPrefix applies the HasPrefix predicate on the "config" field.
func ConfigHasPrefix(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldHasPrefix(FieldConfig, v))
}

// ConfigHasSuffix applies the HasSuffix predicate on the "config" field.
func ConfigHasSuffix(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldHasSuffix(FieldConfig, v))
}

// ConfigEqualFold applies the EqualFold predicate on the "config" field.
func ConfigEqualFold(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldEqualFold(FieldConfig, v))
}

// ConfigContainsFold applies the ContainsFold predicate on the "config" field.
func ConfigContainsFold(v string) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldContainsFold(FieldConfig, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v uint32) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v uint32) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...uint32) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...uint32) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v uint32) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v uint32) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v uint32) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v uint32) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v uint32) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v uint32) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...uint32) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...uint32) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v uint32) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v uint32) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v uint32) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v uint32) predicate.HttpRule {
	return predicate.HttpRule(sql.FieldLTE(FieldUpdateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.HttpRule) predicate.HttpRule {
	return predicate.HttpRule(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.HttpRule) predicate.HttpRule {
	return predicate.HttpRule(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.HttpRule) predicate.HttpRule {
	return predicate.HttpRule(func(s *sql.Selector) {
		p(s.Not())
	})
}
