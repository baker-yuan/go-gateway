// Code generated by ent, DO NOT EDIT.

package httprule

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the httprule type in the database.
	Label = "http_rule"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldGwURL holds the string denoting the gw_url field in the database.
	FieldGwURL = "gw_url"
	// FieldHTTPType holds the string denoting the http_type field in the database.
	FieldHTTPType = "http_type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldApplication holds the string denoting the application field in the database.
	FieldApplication = "application"
	// FieldInterfaceType holds the string denoting the interface_type field in the database.
	FieldInterfaceType = "interface_type"
	// FieldInterfaceURL holds the string denoting the interface_url field in the database.
	FieldInterfaceURL = "interface_url"
	// FieldConfig holds the string denoting the config field in the database.
	FieldConfig = "config"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// Table holds the table name of the httprule in the database.
	Table = "http_rules"
)

// Columns holds all SQL columns for httprule fields.
var Columns = []string{
	FieldID,
	FieldGwURL,
	FieldHTTPType,
	FieldStatus,
	FieldApplication,
	FieldInterfaceType,
	FieldInterfaceURL,
	FieldConfig,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultGwURL holds the default value on creation for the "gw_url" field.
	DefaultGwURL string
	// GwURLValidator is a validator for the "gw_url" field. It is called by the builders before save.
	GwURLValidator func(string) error
	// DefaultHTTPType holds the default value on creation for the "http_type" field.
	DefaultHTTPType string
	// HTTPTypeValidator is a validator for the "http_type" field. It is called by the builders before save.
	HTTPTypeValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
	// ApplicationValidator is a validator for the "application" field. It is called by the builders before save.
	ApplicationValidator func(string) error
	// DefaultInterfaceType holds the default value on creation for the "interface_type" field.
	DefaultInterfaceType uint8
	// DefaultInterfaceURL holds the default value on creation for the "interface_url" field.
	DefaultInterfaceURL string
	// InterfaceURLValidator is a validator for the "interface_url" field. It is called by the builders before save.
	InterfaceURLValidator func(string) error
	// DefaultConfig holds the default value on creation for the "config" field.
	DefaultConfig string
	// ConfigValidator is a validator for the "config" field. It is called by the builders before save.
	ConfigValidator func(string) error
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime uint32
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime uint32
)

// OrderOption defines the ordering options for the HttpRule queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByGwURL orders the results by the gw_url field.
func ByGwURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGwURL, opts...).ToFunc()
}

// ByHTTPType orders the results by the http_type field.
func ByHTTPType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHTTPType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByApplication orders the results by the application field.
func ByApplication(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplication, opts...).ToFunc()
}

// ByInterfaceType orders the results by the interface_type field.
func ByInterfaceType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInterfaceType, opts...).ToFunc()
}

// ByInterfaceURL orders the results by the interface_url field.
func ByInterfaceURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInterfaceURL, opts...).ToFunc()
}

// ByConfig orders the results by the config field.
func ByConfig(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfig, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}
