// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: admin/v1/http_rule.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 接口协议
type InterfaceType int32

const (
	InterfaceType_UNKNOWN InterfaceType = 0 // 未知
	InterfaceType_HTTP    InterfaceType = 1 // http
	InterfaceType_HTTP_S  InterfaceType = 2 // https
	InterfaceType_G_RPC   InterfaceType = 3 // grpc
	InterfaceType_DOUBLE  InterfaceType = 4 // double
)

// Enum value maps for InterfaceType.
var (
	InterfaceType_name = map[int32]string{
		0: "UNKNOWN",
		1: "HTTP",
		2: "HTTP_S",
		3: "G_RPC",
		4: "DOUBLE",
	}
	InterfaceType_value = map[string]int32{
		"UNKNOWN": 0,
		"HTTP":    1,
		"HTTP_S":  2,
		"G_RPC":   3,
		"DOUBLE":  4,
	}
)

func (x InterfaceType) Enum() *InterfaceType {
	p := new(InterfaceType)
	*p = x
	return p
}

func (x InterfaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterfaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_v1_http_rule_proto_enumTypes[0].Descriptor()
}

func (InterfaceType) Type() protoreflect.EnumType {
	return &file_admin_v1_http_rule_proto_enumTypes[0]
}

func (x InterfaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterfaceType.Descriptor instead.
func (InterfaceType) EnumDescriptor() ([]byte, []int) {
	return file_admin_v1_http_rule_proto_rawDescGZIP(), []int{0}
}

// 接口状态
type Status int32

const (
	Status_DEFAULT Status = 0 // 默认
	Status_Online  Status = 1 // 上线
	Status_Offline Status = 2 // 下线
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "DEFAULT",
		1: "Online",
		2: "Offline",
	}
	Status_value = map[string]int32{
		"DEFAULT": 0,
		"Online":  1,
		"Offline": 2,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_v1_http_rule_proto_enumTypes[1].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_admin_v1_http_rule_proto_enumTypes[1]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_admin_v1_http_rule_proto_rawDescGZIP(), []int{1}
}

// 调用grpc接口的方式
type GrpcConfig_GrpcCallType int32

const (
	GrpcConfig_DEFAULT    GrpcConfig_GrpcCallType = 0 // 默认
	GrpcConfig_JSON       GrpcConfig_GrpcCallType = 1 // grpc支持json编码
	GrpcConfig_REFLECTION GrpcConfig_GrpcCallType = 2 // grpc开启反射 reflection.Register(s)
	GrpcConfig_PROTO      GrpcConfig_GrpcCallType = 3 // proto文件
)

// Enum value maps for GrpcConfig_GrpcCallType.
var (
	GrpcConfig_GrpcCallType_name = map[int32]string{
		0: "DEFAULT",
		1: "JSON",
		2: "REFLECTION",
		3: "PROTO",
	}
	GrpcConfig_GrpcCallType_value = map[string]int32{
		"DEFAULT":    0,
		"JSON":       1,
		"REFLECTION": 2,
		"PROTO":      3,
	}
)

func (x GrpcConfig_GrpcCallType) Enum() *GrpcConfig_GrpcCallType {
	p := new(GrpcConfig_GrpcCallType)
	*p = x
	return p
}

func (x GrpcConfig_GrpcCallType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GrpcConfig_GrpcCallType) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_v1_http_rule_proto_enumTypes[2].Descriptor()
}

func (GrpcConfig_GrpcCallType) Type() protoreflect.EnumType {
	return &file_admin_v1_http_rule_proto_enumTypes[2]
}

func (x GrpcConfig_GrpcCallType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GrpcConfig_GrpcCallType.Descriptor instead.
func (GrpcConfig_GrpcCallType) EnumDescriptor() ([]byte, []int) {
	return file_admin_v1_http_rule_proto_rawDescGZIP(), []int{2, 0}
}

// 网关接口映射信息
type HttpRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *uint32        `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`                                                                        // ID
	GwUrl         *string        `protobuf:"bytes,2,opt,name=gw_url,json=gwUrl,proto3,oneof" json:"gw_url,omitempty"`                                                      // 网关接口
	HttpType      *string        `protobuf:"bytes,3,opt,name=http_type,json=httpType,proto3,oneof" json:"http_type,omitempty"`                                             // 接口类型 net/http/method.go
	Application   *string        `protobuf:"bytes,4,opt,name=application,proto3,oneof" json:"application,omitempty"`                                                       // 应用名称
	InterfaceType *InterfaceType `protobuf:"varint,5,opt,name=interface_type,json=interfaceType,proto3,enum=admin.v1.InterfaceType,oneof" json:"interface_type,omitempty"` // 接口协议
	Config        *string        `protobuf:"bytes,6,opt,name=config,proto3,oneof" json:"config,omitempty"`                                                                 // 指定协议的配置
	InterfaceUrl  *string        `protobuf:"bytes,7,opt,name=interface_url,json=interfaceUrl,proto3,oneof" json:"interface_url,omitempty"`                                 // 接口方法
	Status        *Status        `protobuf:"varint,8,opt,name=status,proto3,enum=admin.v1.Status,oneof" json:"status,omitempty"`                                           // 接口状态
	CreateTime    *uint32        `protobuf:"varint,9,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`                                      // 创建时间
	UpdateTime    *uint32        `protobuf:"varint,10,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`                                     // 修改时间
}

func (x *HttpRule) Reset() {
	*x = HttpRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_v1_http_rule_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRule) ProtoMessage() {}

func (x *HttpRule) ProtoReflect() protoreflect.Message {
	mi := &file_admin_v1_http_rule_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRule.ProtoReflect.Descriptor instead.
func (*HttpRule) Descriptor() ([]byte, []int) {
	return file_admin_v1_http_rule_proto_rawDescGZIP(), []int{0}
}

func (x *HttpRule) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *HttpRule) GetGwUrl() string {
	if x != nil && x.GwUrl != nil {
		return *x.GwUrl
	}
	return ""
}

func (x *HttpRule) GetHttpType() string {
	if x != nil && x.HttpType != nil {
		return *x.HttpType
	}
	return ""
}

func (x *HttpRule) GetApplication() string {
	if x != nil && x.Application != nil {
		return *x.Application
	}
	return ""
}

func (x *HttpRule) GetInterfaceType() InterfaceType {
	if x != nil && x.InterfaceType != nil {
		return *x.InterfaceType
	}
	return InterfaceType_UNKNOWN
}

func (x *HttpRule) GetConfig() string {
	if x != nil && x.Config != nil {
		return *x.Config
	}
	return ""
}

func (x *HttpRule) GetInterfaceUrl() string {
	if x != nil && x.InterfaceUrl != nil {
		return *x.InterfaceUrl
	}
	return ""
}

func (x *HttpRule) GetStatus() Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Status_DEFAULT
}

func (x *HttpRule) GetCreateTime() uint32 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *HttpRule) GetUpdateTime() uint32 {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return 0
}

// http配置
type HttpConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HttpConfig) Reset() {
	*x = HttpConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_v1_http_rule_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpConfig) ProtoMessage() {}

func (x *HttpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_admin_v1_http_rule_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpConfig.ProtoReflect.Descriptor instead.
func (*HttpConfig) Descriptor() ([]byte, []int) {
	return file_admin_v1_http_rule_proto_rawDescGZIP(), []int{1}
}

// grpc配置
type GrpcConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallType *GrpcConfig_GrpcCallType `protobuf:"varint,1,opt,name=callType,proto3,enum=admin.v1.GrpcConfig_GrpcCallType,oneof" json:"callType,omitempty"` // 调用grpc接口的方式
	Proto    *string                  `protobuf:"bytes,2,opt,name=proto,proto3,oneof" json:"proto,omitempty"`                                              // proto文件
}

func (x *GrpcConfig) Reset() {
	*x = GrpcConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_v1_http_rule_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcConfig) ProtoMessage() {}

func (x *GrpcConfig) ProtoReflect() protoreflect.Message {
	mi := &file_admin_v1_http_rule_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcConfig.ProtoReflect.Descriptor instead.
func (*GrpcConfig) Descriptor() ([]byte, []int) {
	return file_admin_v1_http_rule_proto_rawDescGZIP(), []int{2}
}

func (x *GrpcConfig) GetCallType() GrpcConfig_GrpcCallType {
	if x != nil && x.CallType != nil {
		return *x.CallType
	}
	return GrpcConfig_DEFAULT
}

func (x *GrpcConfig) GetProto() string {
	if x != nil && x.Proto != nil {
		return *x.Proto
	}
	return ""
}

// 搜索
type ListHttpRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *uint32        `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`                                                                        // ID
	GwUrl         *string        `protobuf:"bytes,2,opt,name=gw_url,json=gwUrl,proto3,oneof" json:"gw_url,omitempty"`                                                      // 网关接口
	HttpType      *string        `protobuf:"bytes,3,opt,name=http_type,json=httpType,proto3,oneof" json:"http_type,omitempty"`                                             // 接口类型 net/http/method.go
	Application   *string        `protobuf:"bytes,4,opt,name=application,proto3,oneof" json:"application,omitempty"`                                                       // 应用名称
	InterfaceType *InterfaceType `protobuf:"varint,5,opt,name=interface_type,json=interfaceType,proto3,enum=admin.v1.InterfaceType,oneof" json:"interface_type,omitempty"` // 接口协议
	Config        *string        `protobuf:"bytes,6,opt,name=config,proto3,oneof" json:"config,omitempty"`                                                                 // 指定协议的配置
	InterfaceUrl  *string        `protobuf:"bytes,7,opt,name=interface_url,json=interfaceUrl,proto3,oneof" json:"interface_url,omitempty"`                                 // 接口方法
	Status        *Status        `protobuf:"varint,8,opt,name=status,proto3,enum=admin.v1.Status,oneof" json:"status,omitempty"`                                           // 接口状态
	CreateTime    *uint32        `protobuf:"varint,9,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`                                      // 创建时间
	UpdateTime    *uint32        `protobuf:"varint,10,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`                                     // 修改时间
	Page          *uint32        `protobuf:"varint,100,opt,name=page,proto3,oneof" json:"page,omitempty"`
	PageSize      *uint32        `protobuf:"varint,101,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
}

func (x *ListHttpRuleReq) Reset() {
	*x = ListHttpRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_v1_http_rule_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHttpRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHttpRuleReq) ProtoMessage() {}

func (x *ListHttpRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_v1_http_rule_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHttpRuleReq.ProtoReflect.Descriptor instead.
func (*ListHttpRuleReq) Descriptor() ([]byte, []int) {
	return file_admin_v1_http_rule_proto_rawDescGZIP(), []int{3}
}

func (x *ListHttpRuleReq) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ListHttpRuleReq) GetGwUrl() string {
	if x != nil && x.GwUrl != nil {
		return *x.GwUrl
	}
	return ""
}

func (x *ListHttpRuleReq) GetHttpType() string {
	if x != nil && x.HttpType != nil {
		return *x.HttpType
	}
	return ""
}

func (x *ListHttpRuleReq) GetApplication() string {
	if x != nil && x.Application != nil {
		return *x.Application
	}
	return ""
}

func (x *ListHttpRuleReq) GetInterfaceType() InterfaceType {
	if x != nil && x.InterfaceType != nil {
		return *x.InterfaceType
	}
	return InterfaceType_UNKNOWN
}

func (x *ListHttpRuleReq) GetConfig() string {
	if x != nil && x.Config != nil {
		return *x.Config
	}
	return ""
}

func (x *ListHttpRuleReq) GetInterfaceUrl() string {
	if x != nil && x.InterfaceUrl != nil {
		return *x.InterfaceUrl
	}
	return ""
}

func (x *ListHttpRuleReq) GetStatus() Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Status_DEFAULT
}

func (x *ListHttpRuleReq) GetCreateTime() uint32 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *ListHttpRuleReq) GetUpdateTime() uint32 {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return 0
}

func (x *ListHttpRuleReq) GetPage() uint32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *ListHttpRuleReq) GetPageSize() uint32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

type DeleteHttpRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *uint32 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"` // ID
}

func (x *DeleteHttpRuleReq) Reset() {
	*x = DeleteHttpRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_v1_http_rule_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHttpRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHttpRuleReq) ProtoMessage() {}

func (x *DeleteHttpRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_v1_http_rule_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHttpRuleReq.ProtoReflect.Descriptor instead.
func (*DeleteHttpRuleReq) Descriptor() ([]byte, []int) {
	return file_admin_v1_http_rule_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteHttpRuleReq) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type HttpRulesRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32     `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message *uint32     `protobuf:"varint,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Rules   []*HttpRule `protobuf:"bytes,3,rep,name=rules,proto3" json:"rules,omitempty"`
	Total   *uint32     `protobuf:"varint,4,opt,name=total,proto3,oneof" json:"total,omitempty"`
}

func (x *HttpRulesRsp) Reset() {
	*x = HttpRulesRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_v1_http_rule_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpRulesRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRulesRsp) ProtoMessage() {}

func (x *HttpRulesRsp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_v1_http_rule_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRulesRsp.ProtoReflect.Descriptor instead.
func (*HttpRulesRsp) Descriptor() ([]byte, []int) {
	return file_admin_v1_http_rule_proto_rawDescGZIP(), []int{5}
}

func (x *HttpRulesRsp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *HttpRulesRsp) GetMessage() uint32 {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return 0
}

func (x *HttpRulesRsp) GetRules() []*HttpRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *HttpRulesRsp) GetTotal() uint32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

type HttpRuleRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *uint32   `protobuf:"varint,1,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Message *uint32   `protobuf:"varint,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Rule    *HttpRule `protobuf:"bytes,3,opt,name=rule,proto3,oneof" json:"rule,omitempty"`
}

func (x *HttpRuleRsp) Reset() {
	*x = HttpRuleRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_v1_http_rule_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpRuleRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRuleRsp) ProtoMessage() {}

func (x *HttpRuleRsp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_v1_http_rule_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRuleRsp.ProtoReflect.Descriptor instead.
func (*HttpRuleRsp) Descriptor() ([]byte, []int) {
	return file_admin_v1_http_rule_proto_rawDescGZIP(), []int{6}
}

func (x *HttpRuleRsp) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *HttpRuleRsp) GetMessage() uint32 {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return 0
}

func (x *HttpRuleRsp) GetRule() *HttpRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

var File_admin_v1_http_rule_proto protoreflect.FileDescriptor

var file_admin_v1_http_rule_proto_rawDesc = []byte{
	0x0a, 0x18, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x96, 0x04, 0x0a, 0x08, 0x48, 0x74, 0x74, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x67, 0x77, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x67, 0x77, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x04, 0x52, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x55,
	0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x07, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x67, 0x77, 0x5f, 0x75,
	0x72, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x0c, 0x0a, 0x0a, 0x48,
	0x74, 0x74, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xc4, 0x01, 0x0a, 0x0a, 0x47, 0x72,
	0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x47, 0x72, 0x70, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x88, 0x01, 0x01, 0x22, 0x40, 0x0a, 0x0c, 0x47, 0x72, 0x70, 0x63, 0x43,
	0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x52, 0x45, 0x46, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x10, 0x03, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xef, 0x04, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x74, 0x74, 0x70, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x67, 0x77, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x67, 0x77, 0x55,
	0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x43,
	0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x04, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x07, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x0a, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x0b, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x67, 0x77, 0x5f, 0x75,
	0x72, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x22, 0x2f, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x74, 0x74, 0x70,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x0c, 0x48, 0x74, 0x74, 0x70, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x52, 0x73, 0x70, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x05,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x90, 0x01, 0x0a, 0x0b, 0x48, 0x74, 0x74, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x73, 0x70,
	0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x02, 0x52, 0x04, 0x72, 0x75,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x2a, 0x49, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x48,
	0x54, 0x54, 0x50, 0x5f, 0x53, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x5f, 0x52, 0x50, 0x43,
	0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x2a, 0x2e,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x02, 0x32, 0x84,
	0x03, 0x0a, 0x0c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12,
	0x5b, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x74, 0x74, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x19, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x74, 0x74, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52,
	0x73, 0x70, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x0b,
	0x41, 0x64, 0x64, 0x48, 0x74, 0x74, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x1a,
	0x15, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01,
	0x2a, 0x22, 0x10, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x74, 0x74,
	0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x74, 0x74, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x15, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74,
	0x74, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x2a, 0x14, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x2f, 0x3a, 0x69, 0x64, 0x12, 0x5c, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x74, 0x74, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x15, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x73, 0x70, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x1a,
	0x14, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x2f, 0x3a, 0x69, 0x64, 0x42, 0x43, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x6b, 0x65, 0x72, 0x2d, 0x79, 0x75, 0x61, 0x6e, 0x2f, 0x67,
	0x6f, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_admin_v1_http_rule_proto_rawDescOnce sync.Once
	file_admin_v1_http_rule_proto_rawDescData = file_admin_v1_http_rule_proto_rawDesc
)

func file_admin_v1_http_rule_proto_rawDescGZIP() []byte {
	file_admin_v1_http_rule_proto_rawDescOnce.Do(func() {
		file_admin_v1_http_rule_proto_rawDescData = protoimpl.X.CompressGZIP(file_admin_v1_http_rule_proto_rawDescData)
	})
	return file_admin_v1_http_rule_proto_rawDescData
}

var file_admin_v1_http_rule_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_admin_v1_http_rule_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_admin_v1_http_rule_proto_goTypes = []interface{}{
	(InterfaceType)(0),           // 0: admin.v1.InterfaceType
	(Status)(0),                  // 1: admin.v1.Status
	(GrpcConfig_GrpcCallType)(0), // 2: admin.v1.GrpcConfig.GrpcCallType
	(*HttpRule)(nil),             // 3: admin.v1.HttpRule
	(*HttpConfig)(nil),           // 4: admin.v1.HttpConfig
	(*GrpcConfig)(nil),           // 5: admin.v1.GrpcConfig
	(*ListHttpRuleReq)(nil),      // 6: admin.v1.ListHttpRuleReq
	(*DeleteHttpRuleReq)(nil),    // 7: admin.v1.DeleteHttpRuleReq
	(*HttpRulesRsp)(nil),         // 8: admin.v1.HttpRulesRsp
	(*HttpRuleRsp)(nil),          // 9: admin.v1.HttpRuleRsp
}
var file_admin_v1_http_rule_proto_depIdxs = []int32{
	0,  // 0: admin.v1.HttpRule.interface_type:type_name -> admin.v1.InterfaceType
	1,  // 1: admin.v1.HttpRule.status:type_name -> admin.v1.Status
	2,  // 2: admin.v1.GrpcConfig.callType:type_name -> admin.v1.GrpcConfig.GrpcCallType
	0,  // 3: admin.v1.ListHttpRuleReq.interface_type:type_name -> admin.v1.InterfaceType
	1,  // 4: admin.v1.ListHttpRuleReq.status:type_name -> admin.v1.Status
	3,  // 5: admin.v1.HttpRulesRsp.rules:type_name -> admin.v1.HttpRule
	3,  // 6: admin.v1.HttpRuleRsp.rule:type_name -> admin.v1.HttpRule
	6,  // 7: admin.v1.GatewayAdmin.ListHttpRule:input_type -> admin.v1.ListHttpRuleReq
	3,  // 8: admin.v1.GatewayAdmin.AddHttpRule:input_type -> admin.v1.HttpRule
	7,  // 9: admin.v1.GatewayAdmin.DeleteHttpRule:input_type -> admin.v1.DeleteHttpRuleReq
	3,  // 10: admin.v1.GatewayAdmin.UpdateHttpRule:input_type -> admin.v1.HttpRule
	8,  // 11: admin.v1.GatewayAdmin.ListHttpRule:output_type -> admin.v1.HttpRulesRsp
	9,  // 12: admin.v1.GatewayAdmin.AddHttpRule:output_type -> admin.v1.HttpRuleRsp
	9,  // 13: admin.v1.GatewayAdmin.DeleteHttpRule:output_type -> admin.v1.HttpRuleRsp
	9,  // 14: admin.v1.GatewayAdmin.UpdateHttpRule:output_type -> admin.v1.HttpRuleRsp
	11, // [11:15] is the sub-list for method output_type
	7,  // [7:11] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_admin_v1_http_rule_proto_init() }
func file_admin_v1_http_rule_proto_init() {
	if File_admin_v1_http_rule_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_admin_v1_http_rule_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_v1_http_rule_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_v1_http_rule_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_v1_http_rule_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHttpRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_v1_http_rule_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHttpRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_v1_http_rule_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpRulesRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_v1_http_rule_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpRuleRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_admin_v1_http_rule_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_admin_v1_http_rule_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_admin_v1_http_rule_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_admin_v1_http_rule_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_admin_v1_http_rule_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_admin_v1_http_rule_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_admin_v1_http_rule_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_admin_v1_http_rule_proto_goTypes,
		DependencyIndexes: file_admin_v1_http_rule_proto_depIdxs,
		EnumInfos:         file_admin_v1_http_rule_proto_enumTypes,
		MessageInfos:      file_admin_v1_http_rule_proto_msgTypes,
	}.Build()
	File_admin_v1_http_rule_proto = out.File
	file_admin_v1_http_rule_proto_rawDesc = nil
	file_admin_v1_http_rule_proto_goTypes = nil
	file_admin_v1_http_rule_proto_depIdxs = nil
}
