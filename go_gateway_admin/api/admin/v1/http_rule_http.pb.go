// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.21.12
// source: admin/v1/http_rule.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGatewayAdminAddHttpRule = "/admin.v1.GatewayAdmin/AddHttpRule"
const OperationGatewayAdminDeleteHttpRule = "/admin.v1.GatewayAdmin/DeleteHttpRule"
const OperationGatewayAdminListHttpRule = "/admin.v1.GatewayAdmin/ListHttpRule"
const OperationGatewayAdminUpdateHttpRule = "/admin.v1.GatewayAdmin/UpdateHttpRule"

type GatewayAdminHTTPServer interface {
	// AddHttpRule 添加接口
	AddHttpRule(context.Context, *HttpRule) (*HttpRuleRsp, error)
	// DeleteHttpRule 删除接口
	DeleteHttpRule(context.Context, *DeleteHttpRuleReq) (*HttpRuleRsp, error)
	// ListHttpRule 获取所有接口
	ListHttpRule(context.Context, *ListHttpRuleReq) (*HttpRulesRsp, error)
	// UpdateHttpRule 修改接口
	UpdateHttpRule(context.Context, *HttpRule) (*HttpRuleRsp, error)
}

func RegisterGatewayAdminHTTPServer(s *http.Server, srv GatewayAdminHTTPServer) {
	r := s.Route("/")
	r.GET("/admin/httpRules", _GatewayAdmin_ListHttpRule0_HTTP_Handler(srv))
	r.POST("/admin/httpRules", _GatewayAdmin_AddHttpRule0_HTTP_Handler(srv))
	r.DELETE("/admin/httpRules/:id", _GatewayAdmin_DeleteHttpRule0_HTTP_Handler(srv))
	r.PUT("/admin/httpRules/:id", _GatewayAdmin_UpdateHttpRule0_HTTP_Handler(srv))
}

func _GatewayAdmin_ListHttpRule0_HTTP_Handler(srv GatewayAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListHttpRuleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayAdminListHttpRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListHttpRule(ctx, req.(*ListHttpRuleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HttpRulesRsp)
		return ctx.Result(200, reply)
	}
}

func _GatewayAdmin_AddHttpRule0_HTTP_Handler(srv GatewayAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HttpRule
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayAdminAddHttpRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddHttpRule(ctx, req.(*HttpRule))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HttpRuleRsp)
		return ctx.Result(200, reply)
	}
}

func _GatewayAdmin_DeleteHttpRule0_HTTP_Handler(srv GatewayAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteHttpRuleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayAdminDeleteHttpRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteHttpRule(ctx, req.(*DeleteHttpRuleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HttpRuleRsp)
		return ctx.Result(200, reply)
	}
}

func _GatewayAdmin_UpdateHttpRule0_HTTP_Handler(srv GatewayAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HttpRule
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayAdminUpdateHttpRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateHttpRule(ctx, req.(*HttpRule))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HttpRuleRsp)
		return ctx.Result(200, reply)
	}
}

type GatewayAdminHTTPClient interface {
	AddHttpRule(ctx context.Context, req *HttpRule, opts ...http.CallOption) (rsp *HttpRuleRsp, err error)
	DeleteHttpRule(ctx context.Context, req *DeleteHttpRuleReq, opts ...http.CallOption) (rsp *HttpRuleRsp, err error)
	ListHttpRule(ctx context.Context, req *ListHttpRuleReq, opts ...http.CallOption) (rsp *HttpRulesRsp, err error)
	UpdateHttpRule(ctx context.Context, req *HttpRule, opts ...http.CallOption) (rsp *HttpRuleRsp, err error)
}

type GatewayAdminHTTPClientImpl struct {
	cc *http.Client
}

func NewGatewayAdminHTTPClient(client *http.Client) GatewayAdminHTTPClient {
	return &GatewayAdminHTTPClientImpl{client}
}

func (c *GatewayAdminHTTPClientImpl) AddHttpRule(ctx context.Context, in *HttpRule, opts ...http.CallOption) (*HttpRuleRsp, error) {
	var out HttpRuleRsp
	pattern := "/admin/httpRules"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGatewayAdminAddHttpRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GatewayAdminHTTPClientImpl) DeleteHttpRule(ctx context.Context, in *DeleteHttpRuleReq, opts ...http.CallOption) (*HttpRuleRsp, error) {
	var out HttpRuleRsp
	pattern := "/admin/httpRules/:id"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGatewayAdminDeleteHttpRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GatewayAdminHTTPClientImpl) ListHttpRule(ctx context.Context, in *ListHttpRuleReq, opts ...http.CallOption) (*HttpRulesRsp, error) {
	var out HttpRulesRsp
	pattern := "/admin/httpRules"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGatewayAdminListHttpRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GatewayAdminHTTPClientImpl) UpdateHttpRule(ctx context.Context, in *HttpRule, opts ...http.CallOption) (*HttpRuleRsp, error) {
	var out HttpRuleRsp
	pattern := "/admin/httpRules/:id"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGatewayAdminUpdateHttpRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
