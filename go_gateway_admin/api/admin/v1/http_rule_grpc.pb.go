// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: admin/v1/http_rule.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GatewayAdmin_ListHttpRule_FullMethodName   = "/admin.v1.GatewayAdmin/ListHttpRule"
	GatewayAdmin_AddHttpRule_FullMethodName    = "/admin.v1.GatewayAdmin/AddHttpRule"
	GatewayAdmin_DeleteHttpRule_FullMethodName = "/admin.v1.GatewayAdmin/DeleteHttpRule"
	GatewayAdmin_UpdateHttpRule_FullMethodName = "/admin.v1.GatewayAdmin/UpdateHttpRule"
)

// GatewayAdminClient is the client API for GatewayAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayAdminClient interface {
	// 获取所有接口
	ListHttpRule(ctx context.Context, in *ListHttpRuleReq, opts ...grpc.CallOption) (*HttpRulesRsp, error)
	// 添加接口
	AddHttpRule(ctx context.Context, in *HttpRule, opts ...grpc.CallOption) (*HttpRuleRsp, error)
	// 删除接口
	DeleteHttpRule(ctx context.Context, in *DeleteHttpRuleReq, opts ...grpc.CallOption) (*HttpRuleRsp, error)
	// 修改接口
	UpdateHttpRule(ctx context.Context, in *HttpRule, opts ...grpc.CallOption) (*HttpRuleRsp, error)
}

type gatewayAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayAdminClient(cc grpc.ClientConnInterface) GatewayAdminClient {
	return &gatewayAdminClient{cc}
}

func (c *gatewayAdminClient) ListHttpRule(ctx context.Context, in *ListHttpRuleReq, opts ...grpc.CallOption) (*HttpRulesRsp, error) {
	out := new(HttpRulesRsp)
	err := c.cc.Invoke(ctx, GatewayAdmin_ListHttpRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAdminClient) AddHttpRule(ctx context.Context, in *HttpRule, opts ...grpc.CallOption) (*HttpRuleRsp, error) {
	out := new(HttpRuleRsp)
	err := c.cc.Invoke(ctx, GatewayAdmin_AddHttpRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAdminClient) DeleteHttpRule(ctx context.Context, in *DeleteHttpRuleReq, opts ...grpc.CallOption) (*HttpRuleRsp, error) {
	out := new(HttpRuleRsp)
	err := c.cc.Invoke(ctx, GatewayAdmin_DeleteHttpRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAdminClient) UpdateHttpRule(ctx context.Context, in *HttpRule, opts ...grpc.CallOption) (*HttpRuleRsp, error) {
	out := new(HttpRuleRsp)
	err := c.cc.Invoke(ctx, GatewayAdmin_UpdateHttpRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayAdminServer is the server API for GatewayAdmin service.
// All implementations must embed UnimplementedGatewayAdminServer
// for forward compatibility
type GatewayAdminServer interface {
	// 获取所有接口
	ListHttpRule(context.Context, *ListHttpRuleReq) (*HttpRulesRsp, error)
	// 添加接口
	AddHttpRule(context.Context, *HttpRule) (*HttpRuleRsp, error)
	// 删除接口
	DeleteHttpRule(context.Context, *DeleteHttpRuleReq) (*HttpRuleRsp, error)
	// 修改接口
	UpdateHttpRule(context.Context, *HttpRule) (*HttpRuleRsp, error)
	mustEmbedUnimplementedGatewayAdminServer()
}

// UnimplementedGatewayAdminServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayAdminServer struct {
}

func (UnimplementedGatewayAdminServer) ListHttpRule(context.Context, *ListHttpRuleReq) (*HttpRulesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHttpRule not implemented")
}
func (UnimplementedGatewayAdminServer) AddHttpRule(context.Context, *HttpRule) (*HttpRuleRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHttpRule not implemented")
}
func (UnimplementedGatewayAdminServer) DeleteHttpRule(context.Context, *DeleteHttpRuleReq) (*HttpRuleRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHttpRule not implemented")
}
func (UnimplementedGatewayAdminServer) UpdateHttpRule(context.Context, *HttpRule) (*HttpRuleRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHttpRule not implemented")
}
func (UnimplementedGatewayAdminServer) mustEmbedUnimplementedGatewayAdminServer() {}

// UnsafeGatewayAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayAdminServer will
// result in compilation errors.
type UnsafeGatewayAdminServer interface {
	mustEmbedUnimplementedGatewayAdminServer()
}

func RegisterGatewayAdminServer(s grpc.ServiceRegistrar, srv GatewayAdminServer) {
	s.RegisterService(&GatewayAdmin_ServiceDesc, srv)
}

func _GatewayAdmin_ListHttpRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHttpRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAdminServer).ListHttpRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAdmin_ListHttpRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAdminServer).ListHttpRule(ctx, req.(*ListHttpRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAdmin_AddHttpRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HttpRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAdminServer).AddHttpRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAdmin_AddHttpRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAdminServer).AddHttpRule(ctx, req.(*HttpRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAdmin_DeleteHttpRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHttpRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAdminServer).DeleteHttpRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAdmin_DeleteHttpRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAdminServer).DeleteHttpRule(ctx, req.(*DeleteHttpRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAdmin_UpdateHttpRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HttpRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAdminServer).UpdateHttpRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayAdmin_UpdateHttpRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAdminServer).UpdateHttpRule(ctx, req.(*HttpRule))
	}
	return interceptor(ctx, in, info, handler)
}

// GatewayAdmin_ServiceDesc is the grpc.ServiceDesc for GatewayAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.v1.GatewayAdmin",
	HandlerType: (*GatewayAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListHttpRule",
			Handler:    _GatewayAdmin_ListHttpRule_Handler,
		},
		{
			MethodName: "AddHttpRule",
			Handler:    _GatewayAdmin_AddHttpRule_Handler,
		},
		{
			MethodName: "DeleteHttpRule",
			Handler:    _GatewayAdmin_DeleteHttpRule_Handler,
		},
		{
			MethodName: "UpdateHttpRule",
			Handler:    _GatewayAdmin_UpdateHttpRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/v1/http_rule.proto",
}
